import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

export async function middleware(req) {
  const res = NextResponse.next();
  
  // Cr√©er le client Supabase pour le middleware (cl√©s hardcod√©es temporairement)
  const supabase = createClient(
    'https://jxbgrvlmvnofaxbtcmsw.supabase.co',
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp4Ymdydmxtdm5vZmF4YnRjbXN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYzNjQyNDMsImV4cCI6MjA3MTk0MDI0M30.FqDYhevVvPYe-1t52OcidgP6jG-ynJVOFkyGTPHk84A',
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    }
  );

  // R√©cup√©rer le token depuis les cookies
  const token = req.cookies.get('token')?.value || 
                req.cookies.get('sb-access-token')?.value || 
                req.cookies.get('supabase-auth-token')?.value;

  console.log('üîç MIDDLEWARE DEBUG - Token trouv√©:', !!token);
  console.log('üîç MIDDLEWARE DEBUG - Cookies:', req.cookies.getAll());

  let user = null;
  if (token) {
    try {
      const { data: { user: userData } } = await supabase.auth.getUser(token);
      user = userData;
      console.log('üîç MIDDLEWARE DEBUG - User trouv√©:', !!user);
    } catch (error) {
      console.error('‚ùå MIDDLEWARE DEBUG - Erreur v√©rification token:', error);
    }
  }

  // R√©cup√©rer le chemin de la requ√™te
  const pathname = req.nextUrl.pathname;
  console.log('üîç MIDDLEWARE DEBUG - Pathname:', pathname);

  // Si l'utilisateur n'est pas connect√©
  if (!user) {
    console.log('‚ùå MIDDLEWARE DEBUG - Pas d\'utilisateur, redirection vers accueil');
    if (pathname.startsWith('/admin') || pathname.startsWith('/partner')) {
      return NextResponse.redirect(new URL('/', req.url));
    }
    return res;
  }

  // R√©cup√©rer le r√¥le depuis le profil utilisateur (table users)
  let userRole = null;
  try {
    const { data: userData } = await supabase
      .from('users')
      .select('role')
      .eq('id', user.id)
      .single();
    userRole = userData?.role || 'user';
    console.log('üîç MIDDLEWARE DEBUG - R√¥le utilisateur:', userRole);
  } catch (e) {
    userRole = 'user';
    console.error('‚ùå MIDDLEWARE DEBUG - Erreur r√©cup√©ration r√¥le:', e);
  }

  // Protection des routes admin
  if (pathname.startsWith('/admin') && userRole !== 'admin') {
    console.log('‚ùå MIDDLEWARE DEBUG - Acc√®s admin refus√©, r√¥le:', userRole);
    return NextResponse.redirect(new URL('/', req.url));
  }

  // Protection des routes partenaire
  if (pathname.startsWith('/partner') && userRole !== 'restaurant') {
    console.log('‚ùå MIDDLEWARE DEBUG - Acc√®s partenaire refus√©, r√¥le:', userRole);
    return NextResponse.redirect(new URL('/', req.url));
  }

  console.log('‚úÖ MIDDLEWARE DEBUG - Acc√®s autoris√© pour:', pathname);
  return res;
}

export const config = {
  matcher: ['/admin/:path*', '/partner/:path*'],
}; 