import { NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';

export async function GET(request, { params }) {
  try {
    const { id } = params;
    
    console.log('=== R√âCUP√âRATION COMMANDE PAR ID ===');
    console.log('ID demand√©:', id);

    // V√©rifier l'authentification
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.error('‚ùå Pas de token d\'authentification');
      return NextResponse.json({ error: 'Token d\'authentification requis' }, { status: 401 });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      console.error('‚ùå Erreur authentification:', userError);
      return NextResponse.json({ error: 'Token invalide' }, { status: 401 });
    }

    console.log('‚úÖ Utilisateur authentifi√©:', user.email);

    // R√©cup√©rer la commande
    const { data: order, error } = await supabase
      .from('orders')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('‚ùå Erreur r√©cup√©ration commande:', error);
      return NextResponse.json({ error: 'Commande non trouv√©e' }, { status: 404 });
    }

    if (!order) {
      console.log('‚ùå Aucune commande trouv√©e pour l\'ID:', id);
      return NextResponse.json({ error: 'Commande non trouv√©e' }, { status: 404 });
    }

    // V√©rifier l'appartenance de la commande
    // Pour l'instant, on v√©rifie par email du client (customer_name)
    // Dans un vrai syst√®me, on aurait une relation user_id dans la commande
    const { data: userData, error: userDataError } = await supabase
      .from('users')
      .select('nom, prenom, email')
      .eq('id', user.id)
      .single();

    if (userDataError || !userData) {
      console.error('‚ùå Erreur r√©cup√©ration donn√©es utilisateur:', userDataError);
      return NextResponse.json({ error: 'Erreur utilisateur' }, { status: 500 });
    }

    // V√©rifier si la commande appartient √† cet utilisateur
    // On compare le nom du client avec le nom de l'utilisateur connect√©
    const fullUserName = `${userData.prenom} ${userData.nom}`;
    if (order.customer_name !== fullUserName) {
      console.error('‚ùå Commande ne appartient pas √† l\'utilisateur:', {
        commande_client: order.customer_name,
        utilisateur: fullUserName
      });
      return NextResponse.json({ error: 'Vous n\'√™tes pas autoris√© √† voir cette commande' }, { status: 403 });
    }

    console.log('‚úÖ Commande trouv√©e et autoris√©e:', order.id);
    return NextResponse.json(order);
  } catch (error) {
    console.error('‚ùå Erreur API commande:', error);
    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });
  }
}

export async function PUT(request, { params }) {
  try {
    const { id } = params;
    const body = await request.json();
    
    console.log('=== MISE √Ä JOUR COMMANDE ===');
    console.log('ID commande:', id);
    console.log('Donn√©es re√ßues:', body);

    // R√©cup√©rer le token d'authentification
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.error('‚ùå Pas de token d\'authentification');
      return NextResponse.json({ error: 'Token d\'authentification requis' }, { status: 401 });
    }

    const token = authHeader.split(' ')[1];
    console.log('üîë Token re√ßu:', token ? 'Oui' : 'Non');

    // V√©rifier l'authentification
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    if (userError || !user) {
      console.error('‚ùå Erreur authentification:', userError);
      return NextResponse.json({ error: 'Token invalide' }, { status: 401 });
    }

    console.log('‚úÖ Utilisateur authentifi√©:', user.email);

    // Mettre √† jour la commande
    const { data, error } = await supabase
      .from('orders')
      .update({
        status: body.status,
        rejection_reason: body.reason || null,
        preparation_time: body.preparation_time || null,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erreur mise √† jour:', error);
      return NextResponse.json({ error: 'Erreur lors de la mise √† jour' }, { status: 500 });
    }

    console.log('‚úÖ Commande mise √† jour:', data);
    return NextResponse.json(data);
  } catch (error) {
    console.error('‚ùå Erreur API mise √† jour:', error);
    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });
  }
}