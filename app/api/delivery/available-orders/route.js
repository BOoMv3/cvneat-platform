import { NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';

export async function GET(request) {
  try {
    console.log('üîç API available-orders appel√©e');
    
    // R√©cup√©rer le token depuis les cookies ou headers
    const authHeader = request.headers.get('authorization');
    const token = authHeader?.replace('Bearer ', '') || 
                  request.cookies.get('sb-access-token')?.value ||
                  request.cookies.get('supabase-auth-token')?.value;
    
    console.log('Token trouv√©:', !!token);
    
    const { data: { user } } = await supabase.auth.getUser(token);
    
    if (!user) {
      console.log('‚ùå Pas d\'utilisateur connect√©');
      return NextResponse.json({ error: 'Non autoris√©' }, { status: 401 });
    }

    console.log('‚úÖ Utilisateur connect√©:', user.email);

    // V√©rifier que l'utilisateur est un livreur (par email)
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('role')
      .eq('email', user.email)
      .single();

    if (userError || !userData || userData.role !== 'delivery') {
      console.log('‚ùå R√¥le incorrect:', userData?.role, 'pour email:', user.email);
      return NextResponse.json({ error: 'Acc√®s refus√© - R√¥le livreur requis' }, { status: 403 });
    }

    console.log('‚úÖ R√¥le livreur confirm√©');

    // R√©cup√©rer les commandes disponibles pour livraison
    // Les livreurs voient TOUTES les commandes sauf celles d√©j√† livr√©es
    const { data: orders, error } = await supabase
      .from('orders')
      .select(`
        *,
        restaurant:restaurants(nom, adresse, telephone)
      `)
      .not('status', 'eq', 'delivered') // Toutes sauf livr√©es
      .is('delivery_id', null) // Pas encore assign√©es √† un livreur
      .order('created_at', { ascending: true });

    if (error) {
      console.error('‚ùå Erreur r√©cup√©ration commandes:', error);
      return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });
    }

    console.log('‚úÖ Commandes r√©cup√©r√©es:', orders?.length || 0);
    return NextResponse.json(orders || []);
  } catch (error) {
    console.error('‚ùå Erreur API commandes disponibles:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
} 