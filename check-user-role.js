const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (remplacez par vos vraies cl√©s)
const supabaseUrl = 'https://jxbgrvlmvnofaxbtcmsw.supabase.co';
const supabaseServiceKey = 'VOTRE_NOUVELLE_CL√â_SERVICE_ROLE'; // Remplacez par votre NOUVELLE cl√© service_role

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkUserRole(email) {
  console.log(`üîç V√©rification du r√¥le pour: ${email}`);
  
  try {
    // 1. V√©rifier si l'utilisateur existe dans la table users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (userError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateur:', userError);
      return;
    }

    if (!userData) {
      console.log('‚ùå Utilisateur non trouv√© dans la table users');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√© dans la table users:');
    console.log('   ID:', userData.id);
    console.log('   Nom:', userData.nom);
    console.log('   Pr√©nom:', userData.prenom);
    console.log('   Email:', userData.email);
    console.log('   R√¥le:', userData.role);
    console.log('   Cr√©√© le:', userData.created_at);

    // 2. V√©rifier si l'utilisateur existe dans Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateurs auth:', authError);
      return;
    }

    const authUser = authData.users.find(u => u.email === email);
    
    if (authUser) {
      console.log('‚úÖ Utilisateur trouv√© dans Supabase Auth:');
      console.log('   ID Auth:', authUser.id);
      console.log('   Email confirm√©:', authUser.email_confirmed_at);
      console.log('   Cr√©√© le:', authUser.created_at);
      console.log('   Derni√®re connexion:', authUser.last_sign_in_at);
    } else {
      console.log('‚ùå Utilisateur NON trouv√© dans Supabase Auth');
    }

    // 3. V√©rifier les permissions
    console.log('\nüîê V√âRIFICATION DES PERMISSIONS:');
    
    if (userData.role === 'admin') {
      console.log('   ‚úÖ R√¥le ADMIN - Acc√®s √† /admin autoris√©');
    } else {
      console.log('   ‚ùå R√¥le NON ADMIN - Acc√®s √† /admin refus√©');
    }
    
    if (userData.role === 'restaurant') {
      console.log('   ‚úÖ R√¥le RESTAURANT - Acc√®s √† /partner autoris√©');
    } else {
      console.log('   ‚ùå R√¥le NON RESTAURANT - Acc√®s √† /partner refus√©');
    }
    
    if (userData.role === 'delivery') {
      console.log('   ‚úÖ R√¥le LIVREUR - Acc√®s √† /delivery autoris√©');
    } else {
      console.log('   ‚ùå R√¥le NON LIVREUR - Acc√®s √† /delivery refus√©');
    }

    // 4. V√©rifier la structure de la table users
    console.log('\nüìä STRUCTURE DE LA TABLE USERS:');
    const { data: tableInfo, error: tableError } = await supabase
      .from('users')
      .select('*')
      .limit(1);
    
    if (tableError) {
      console.error('‚ùå Erreur r√©cup√©ration structure table:', tableError);
    } else if (tableInfo && tableInfo.length > 0) {
      const columns = Object.keys(tableInfo[0]);
      console.log('   Colonnes disponibles:', columns);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Utilisation
const emailToCheck = process.argv[2] || 'admin@cvneat.com';
console.log('üöÄ Script de v√©rification des r√¥les utilisateur\n');

if (emailToCheck === 'VOTRE_SERVICE_ROLE_KEY') {
  console.log('‚ùå ERREUR: Vous devez remplacer VOTRE_SERVICE_ROLE_KEY par votre vraie cl√© service_role');
  console.log('üìù Instructions:');
  console.log('1. Ouvrez create-test-accounts.js');
  console.log('2. Copiez votre cl√© service_role');
  console.log('3. Remplacez VOTRE_SERVICE_ROLE_KEY dans ce fichier');
  console.log('4. Relancez: node check-user-role.js admin@cvneat.com');
} else {
  checkUserRole(emailToCheck);
} 